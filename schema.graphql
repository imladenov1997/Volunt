type Currency {
    name: String!
}

interface Bill {
    ID: ID!
    currency: Currency
    value: Float
}

type TotalBill implements Bill {
    ID: ID!
	currency: Currency
	value: Float
    people: [Person!]
}

type PersonalBill implements Bill {
    ID: ID!
    currency: Currency
    value: Float
}

type ForeignBill implements Bill {
    ID: ID!
	currency: Currency
	value: Float
}

type Person {
    ID: ID!
    bill: PersonalBill
}

type Exchange {
    ID: ID
    exchangeFromBill: TotalBill 
    exchangeToBill: ForeignBill
    exchangeRate: Float
}

type Query {
    sampleQuery (test: String): Int
}

type Mutation {
    createExchange (totalBillCurrency: String!, totalBillValue: Float!, toBillCurrency: String!, toBillValue: Float!): Exchange,
    addPerson (exchangeID: String!, value: Float!): Person
    updatePersonsBill (value: Float!): Person
    updateForeignBill (currency: String!, value: String!): Bill
    updateTotalBill (currency: String!, value: String!): Bill
    changeCurrency (currency: String!, value: String!): Bill
}